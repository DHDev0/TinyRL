import subprocess
import signal
import sys
import os
import time

# Signal handler for Ctrl+Z/C
def handle_sigstp(signum, frame):
    print("SIGTSTP received. Exiting...")
    sys.exit(0)

def clear_cache():
    command_c = ["/home/user/.cache/pocl/kcache",
                "/home/user/.cache/pyopencl/pyopencl-compiler-cache-v2-py3.10.12.final.0",
                "/home/user/.cache/pytools/pdict-v4-pyopencl-invoker-cache-v41-py3.10.12.final.0"]
    for i in command_c:
        try: subprocess.run(["rm", "-rf", i])
        except Exception as e: print(f"An error occurred: {e}")
        
if __name__ == "__main__":
    while True:
        signal.signal(signal.SIGTSTP, handle_sigstp)
        command_to_run = ["python", "/home/user/ubuntu/TinyRL/ppo-lstm-pytorch.py"]
        
        envv = os.environ.copy()
        envv["GPU"] = "1"

        process = None
        try:
            process = subprocess.Popen(command_to_run, env=envv)
            
            elapsed_time = 0
            timeout = 900
            stat = True
            
            while stat:
                if process.poll() is not None:
                    break
                time.sleep(1)
                elapsed_time += 1

                if elapsed_time >= timeout and not os.path.exists("/home/user/ubuntu/TinyRL/saving_model.txt"):
                    print("Process timed out. Terminating...")
                    process.terminate()
                    process.wait()
                    # clear_cache()
                    stat = False

        except subprocess.CalledProcessError:
            clear_cache()
            print("Process encountered an error. Restarting...")
        except KeyboardInterrupt:
            print("Ctrl+C received. Exiting...")
            if process:
                process.terminate()
            clear_cache()
            break
        
        # Before saving the model

